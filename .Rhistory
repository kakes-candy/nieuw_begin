}
return(x)
}
# Nulls vervangen in beide bestanden
bggz_traject <- bggz_traject %>%
mutate_each(funs(verwijder_null))
bggz_sessies <- bggz_sessies %>%
mutate_each(funs(verwijder_null))
# kolommem met datums in trajectenbestand
datums <- c(which(names(bggz_traject) %in% c("laatst_uitgevoerde_BGGZ_sessie")),
which(grepl("[Dd]atum", names(bggz_traject))))
bggz_traject[, datums] <- lapply(bggz_traject[, datums], dmy)
View(bggz_traject)
View(bggz_traject)
bggz_traject$laatst_geplande_BGGZ_sessie <- dmy(bggz_traject$laatst_geplande_BGGZ_sessie)
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"))
# Opschonen -------------------------------------------------------------------------------------------------------
verwijder_null <- function(x) {
if (is.character(x)) {
# Check of er NULL voorkomt in de kolom
hass_null <- FALSE
hass_null <- sum(x == "NULL", na.rm = TRUE) > 0
if(hass_null) {
x <- sub("NULL", "", x)
}
}
return(x)
}
# Nulls vervangen in beide bestanden
bggz_traject <- bggz_traject %>%
mutate_each(funs(verwijder_null))
bggz_sessies <- bggz_sessies %>%
mutate_each(funs(verwijder_null))
# Datums ----------------------------------------------------------------------------------------------------------
# kolommem met datums in trajectenbestand
datums <- c(which(names(bggz_traject) %in% c("laatst_geplande_BGGZ_sessie", "laatst_uitgevoerde_BGGZ_sessie")),
which(grepl("[Dd]atum", names(bggz_traject))))
bggz_traject[, datums] <- lapply(bggz_traject[, datums], dmy)
View(bggz_traject)
names(bggz_sessies)
colspecs_bggz_sessies <- c(
Dossierid = txt,
basisggztrajectid = txt,
naam = txt,
Geboortedatum = txt,
BurgerServiceNummer = txt,
declarant = txt,
startdatumbggz = txt,
einddatumbggz = txt,
ZorgvraagzwaarteInitieel = txt,
ZorgvraagzwaarteActueel = txt,
ZorgverzekeraarVorigJaar = txt,
ZorgverzekeraarHuidigJaar = txt,
productnaam = txt,
starttijd = txt,
duur = num,
UitwerktijdDuur = num,
IndirecteTijd = num,
Sessiestatus = txt,
vestiging = txt,
bggztrajectstatus = txt,
sessie_id = txt,
totale_tijdsbesteding = num,
totale_tijdsbesteding_geslotentrajecten = num,
sessienaam = txt,
Therapeut = txt)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
datums <- c(which(grepl("[Dd]atum", names(bggz_traject))))
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
View(bggz_sessies)
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
colspecs_bggz_sessies <- c(
Dossierid = txt,
basisggztrajectid = txt,
naam = txt,
Geboortedatum = txt,
BurgerServiceNummer = txt,
declarant = txt,
startdatumbggz = txt,
einddatumbggz = txt,
ZorgvraagzwaarteInitieel = txt,
ZorgvraagzwaarteActueel = txt,
ZorgverzekeraarVorigJaar = txt,
ZorgverzekeraarHuidigJaar = txt,
productnaam = txt,
starttijd = date,
duur = num,
UitwerktijdDuur = num,
IndirecteTijd = num,
Sessiestatus = txt,
vestiging = txt,
bggztrajectstatus = txt,
sessie_id = txt,
totale_tijdsbesteding = num,
totale_tijdsbesteding_geslotentrajecten = num,
sessienaam = txt,
Therapeut = txt)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
colspecs_bggz_sessies <- c(
Dossierid = txt,
basisggztrajectid = txt,
naam = txt,
Geboortedatum = date,
BurgerServiceNummer = txt,
declarant = txt,
startdatumbggz = txt,
einddatumbggz = txt,
ZorgvraagzwaarteInitieel = txt,
ZorgvraagzwaarteActueel = txt,
ZorgverzekeraarVorigJaar = txt,
ZorgverzekeraarHuidigJaar = txt,
productnaam = txt,
starttijd = date,
duur = num,
UitwerktijdDuur = num,
IndirecteTijd = num,
Sessiestatus = txt,
vestiging = txt,
bggztrajectstatus = txt,
sessie_id = txt,
totale_tijdsbesteding = num,
totale_tijdsbesteding_geslotentrajecten = num,
sessienaam = txt,
Therapeut = txt)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
colspecs_bggz_sessies <- c(
Dossierid = txt,
basisggztrajectid = txt,
naam = txt,
Geboortedatum = txt,
BurgerServiceNummer = txt,
declarant = txt,
startdatumbggz = txt,
einddatumbggz = txt,
ZorgvraagzwaarteInitieel = txt,
ZorgvraagzwaarteActueel = txt,
ZorgverzekeraarVorigJaar = txt,
ZorgverzekeraarHuidigJaar = txt,
productnaam = txt,
starttijd = date,
duur = num,
UitwerktijdDuur = num,
IndirecteTijd = num,
Sessiestatus = txt,
vestiging = txt,
bggztrajectstatus = txt,
sessie_id = txt,
totale_tijdsbesteding = num,
totale_tijdsbesteding_geslotentrajecten = num,
sessienaam = txt,
Therapeut = txt)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
View(bggz_sessies)
setwd("C:\Users\nkakes\Dropbox\04 R\scripts\00 Werkmap\00 nieuw begin")
setwd("C:/Users/nkakes/Dropbox/04 R/scripts/00 Werkmap/00 nieuw begin")
# Toelichting -----------------------------------------------------------------------------------------------------
# Script om de gegevens van BGGZ trajecten in te lezen.
# Het doel is niet om via dit script analyses in te doen. Het moet een basis bieden voor
# verdere analyse. Het moet gegevens voorbereiden zodat deze makkelijk ingepast kunnen worden in de
# datastructuur zoals deze is beschreven in het data_structuur document. Deze structuur is bedoeld
# om verdere bewerkingen veel eenvoudiger te maken. Bijvoorbeeld door:
# een eenduidige benaming,
# geen dubbeling in data behalve wanneer noodzakelijk.
#
# Verder zou het mooi zijn als in de scripts een aantal validaties kunnen worden aangebracht. Dat
# is echter nu niet in scope.
# Packages laden --------------------------------------------------------------------------------------------------
# Eigen library om paden naar bestanden in te stellen
library(mySetwd)
# externe libraries
library(dplyr)
library(data.table)
library(lubridate)
library(tidyr)
library(readr)
library(readxl)
# Data inlezen ----------------------------------------------------------------------------------------------------
# Er zijn verschillende databestanden relevant, welke hier worden ingelezen
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
# Specifcaties voor de kolommen
source(file = "kolomspecificaties.R")
# Opschonen -------------------------------------------------------------------------------------------------------
verwijder_null <- function(x) {
if (is.character(x)) {
# Check of er NULL voorkomt in de kolom
hass_null <- FALSE
hass_null <- sum(x == "NULL", na.rm = TRUE) > 0
if(hass_null) {
x <- sub("NULL", "", x)
}
}
return(x)
}
# Nulls vervangen in beide bestanden
bggz_traject <- bggz_traject %>%
mutate_each(funs(verwijder_null))
bggz_sessies <- bggz_sessies %>%
mutate_each(funs(verwijder_null))
# Datums ----------------------------------------------------------------------------------------------------------
# kolommem met datums in trajectenbestand
datums <- c(which(names(bggz_traject) %in% c("laatst_geplande_BGGZ_sessie", "laatst_uitgevoerde_BGGZ_sessie")),
which(grepl("[Dd]atum", names(bggz_traject))))
# datums converteren
bggz_traject[, datums] <- lapply(bggz_traject[, datums], dmy)
# kolommen met datums in sessiebestand
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
# datums converteren
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
View(bggz_sessies)
View(bggz_traject)
# Toelichting -----------------------------------------------------------------------------------------------------
# Script om de gegevens van BGGZ trajecten in te lezen.
# Het doel is niet om via dit script analyses in te doen. Het moet een basis bieden voor
# verdere analyse. Het moet gegevens voorbereiden zodat deze makkelijk ingepast kunnen worden in de
# datastructuur zoals deze is beschreven in het data_structuur document. Deze structuur is bedoeld
# om verdere bewerkingen veel eenvoudiger te maken. Bijvoorbeeld door:
# een eenduidige benaming,
# geen dubbeling in data behalve wanneer noodzakelijk.
#
# Verder zou het mooi zijn als in de scripts een aantal validaties kunnen worden aangebracht. Dat
# is echter nu niet in scope.
# Packages laden --------------------------------------------------------------------------------------------------
# Eigen library om paden naar bestanden in te stellen
library(mySetwd)
# externe libraries
library(dplyr)
library(data.table)
library(lubridate)
library(tidyr)
library(readr)
library(readxl)
# Data inlezen ----------------------------------------------------------------------------------------------------
# Er zijn verschillende databestanden relevant, welke hier worden ingelezen
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
# Specifcaties voor de kolommen
source(file = "kolomspecificaties.R")
# Opschonen -------------------------------------------------------------------------------------------------------
verwijder_null <- function(x) {
if (is.character(x)) {
# Check of er NULL voorkomt in de kolom
hass_null <- FALSE
hass_null <- sum(x == "NULL", na.rm = TRUE) > 0
if(hass_null) {
x <- sub("NULL", "", x)
}
}
return(x)
}
# Nulls vervangen in beide bestanden
bggz_traject <- bggz_traject %>%
mutate_each(funs(verwijder_null))
bggz_sessies <- bggz_sessies %>%
mutate_each(funs(verwijder_null))
# Datums ----------------------------------------------------------------------------------------------------------
# kolommem met datums in trajectenbestand
datums <- c(which(names(bggz_traject) %in% c("laatst_geplande_BGGZ_sessie", "laatst_uitgevoerde_BGGZ_sessie")),
which(grepl("[Dd]atum", names(bggz_traject))))
# datums converteren
bggz_traject[, datums] <- lapply(bggz_traject[, datums], dmy)
# kolommen met datums in sessiebestand
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
# datums converteren
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
# Toelichting -----------------------------------------------------------------------------------------------------
# Script om de gegevens van BGGZ trajecten in te lezen.
# Het doel is niet om via dit script analyses in te doen. Het moet een basis bieden voor
# verdere analyse. Het moet gegevens voorbereiden zodat deze makkelijk ingepast kunnen worden in de
# datastructuur zoals deze is beschreven in het data_structuur document. Deze structuur is bedoeld
# om verdere bewerkingen veel eenvoudiger te maken. Bijvoorbeeld door:
# een eenduidige benaming,
# geen dubbeling in data behalve wanneer noodzakelijk.
#
# Verder zou het mooi zijn als in de scripts een aantal validaties kunnen worden aangebracht. Dat
# is echter nu niet in scope.
# Packages laden --------------------------------------------------------------------------------------------------
# Eigen library om paden naar bestanden in te stellen
library(mySetwd)
# externe libraries
library(dplyr)
library(data.table)
library(lubridate)
library(tidyr)
library(readr)
library(readxl)
# Data inlezen ----------------------------------------------------------------------------------------------------
# Er zijn verschillende databestanden relevant, welke hier worden ingelezen
# Specifcaties voor de kolommen
source(file = "kolomspecificaties.R")
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
# Opschonen -------------------------------------------------------------------------------------------------------
verwijder_null <- function(x) {
if (is.character(x)) {
# Check of er NULL voorkomt in de kolom
hass_null <- FALSE
hass_null <- sum(x == "NULL", na.rm = TRUE) > 0
if(hass_null) {
x <- sub("NULL", "", x)
}
}
return(x)
}
# Nulls vervangen in beide bestanden
bggz_traject <- bggz_traject %>%
mutate_each(funs(verwijder_null))
bggz_sessies <- bggz_sessies %>%
mutate_each(funs(verwijder_null))
# Datums ----------------------------------------------------------------------------------------------------------
# kolommem met datums in trajectenbestand
datums <- c(which(names(bggz_traject) %in% c("laatst_geplande_BGGZ_sessie", "laatst_uitgevoerde_BGGZ_sessie")),
which(grepl("[Dd]atum", names(bggz_traject))))
# datums converteren
bggz_traject[, datums] <- lapply(bggz_traject[, datums], dmy)
# kolommen met datums in sessiebestand
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
# datums converteren
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
num <- "numeric"; txt = "text"; date = "date"; blank = "blank"
# Kolomspecificaties bggz_traject_onderhanden_werk ----------------------------------------------------------------
colspecs_bggz_traject <- c(
Dossierid = txt,
basisggztrajectid = txt ,
naam = txt,
Geboortedatum = txt,
BurgerServiceNummer = txt,
declarant = txt,
startdatumbggz = txt,
einddatumbggz = txt,
ZorgvraagzwaarteInitieel = txt,
ZorgvraagzwaarteActueel = txt,
ZorgverzekeraarVorigJaar = txt,
ZorgverzekeraarHuidigJaar = txt,
duur = num,
Uitwerktijdduur = num,
IndirecteTijd = num,
vestiging = txt,
bggztrajectstatus = txt,
totale_tijdsbesteding = num,
totale_tijdsbesteding_geslotentrajecten = num,
dossieringangsdatum = txt,
laatst_geplande_BGGZ_sessie = txt,
laatst_uitgevoerde_BGGZ_sessie = txt,
HoofdbehandelaarOnderzoek = txt,
HoofdbehandelaarBehandeling = txt,
MinimaleFunctie = txt,
HoofdbehandelaarOnderzoekfunctie = txt,
HoofdbehandelaarBehandelingfunctie = txt,
AGBCodeHBbehandeling = txt,
AGBCodeHBonderzoek = txt,
IngangsdatumAgbCodebehandelaar = txt,
IngangsdatumAgbCodeonderzoeker = txt,
behandelaarlaatstesessie = txt,
primaire_diagnose = txt )
rm(list = ls())
# Toelichting -----------------------------------------------------------------------------------------------------
# Script om de gegevens van BGGZ trajecten in te lezen.
# Het doel is niet om via dit script analyses in te doen. Het moet een basis bieden voor
# verdere analyse. Het moet gegevens voorbereiden zodat deze makkelijk ingepast kunnen worden in de
# datastructuur zoals deze is beschreven in het data_structuur document. Deze structuur is bedoeld
# om verdere bewerkingen veel eenvoudiger te maken. Bijvoorbeeld door:
# een eenduidige benaming,
# geen dubbeling in data behalve wanneer noodzakelijk.
#
# Verder zou het mooi zijn als in de scripts een aantal validaties kunnen worden aangebracht. Dat
# is echter nu niet in scope.
# Packages laden --------------------------------------------------------------------------------------------------
# Eigen library om paden naar bestanden in te stellen
library(mySetwd)
# externe libraries
library(dplyr)
library(data.table)
library(lubridate)
library(tidyr)
library(readr)
library(readxl)
# Data inlezen ----------------------------------------------------------------------------------------------------
# Er zijn verschillende databestanden relevant, welke hier worden ingelezen
# Specifcaties voor de kolommen
source(file = "kolomspecificaties.R")
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"))
names(bggz_traject)
rm(list = ls())
# Toelichting -----------------------------------------------------------------------------------------------------
# Script om de gegevens van BGGZ trajecten in te lezen.
# Het doel is niet om via dit script analyses in te doen. Het moet een basis bieden voor
# verdere analyse. Het moet gegevens voorbereiden zodat deze makkelijk ingepast kunnen worden in de
# datastructuur zoals deze is beschreven in het data_structuur document. Deze structuur is bedoeld
# om verdere bewerkingen veel eenvoudiger te maken. Bijvoorbeeld door:
# een eenduidige benaming,
# geen dubbeling in data behalve wanneer noodzakelijk.
#
# Verder zou het mooi zijn als in de scripts een aantal validaties kunnen worden aangebracht. Dat
# is echter nu niet in scope.
# Packages laden --------------------------------------------------------------------------------------------------
# Eigen library om paden naar bestanden in te stellen
library(mySetwd)
# externe libraries
library(dplyr)
library(data.table)
library(lubridate)
library(tidyr)
library(readr)
library(readxl)
# Data inlezen ----------------------------------------------------------------------------------------------------
# Er zijn verschillende databestanden relevant, welke hier worden ingelezen
# Specifcaties voor de kolommen
source(file = "kolomspecificaties.R")
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
rm(list = ls())
# Toelichting -----------------------------------------------------------------------------------------------------
# Script om de gegevens van BGGZ trajecten in te lezen.
# Het doel is niet om via dit script analyses in te doen. Het moet een basis bieden voor
# verdere analyse. Het moet gegevens voorbereiden zodat deze makkelijk ingepast kunnen worden in de
# datastructuur zoals deze is beschreven in het data_structuur document. Deze structuur is bedoeld
# om verdere bewerkingen veel eenvoudiger te maken. Bijvoorbeeld door:
# een eenduidige benaming,
# geen dubbeling in data behalve wanneer noodzakelijk.
#
# Verder zou het mooi zijn als in de scripts een aantal validaties kunnen worden aangebracht. Dat
# is echter nu niet in scope.
# Packages laden --------------------------------------------------------------------------------------------------
# Eigen library om paden naar bestanden in te stellen
library(mySetwd)
# externe libraries
library(dplyr)
library(data.table)
library(lubridate)
library(tidyr)
library(readr)
library(readxl)
# Data inlezen ----------------------------------------------------------------------------------------------------
# Er zijn verschillende databestanden relevant, welke hier worden ingelezen
# Specifcaties voor de kolommen
source(file = "kolomspecificaties.R")
# trajecten
bggz_traject <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "bggz_traject_onderhanden_werk.xlsx"),
col_types = colspecs_bggz_traject)
# sessies
bggz_sessies <- read_excel(path = paste0(my_setwd(set = FALSE), "/", "Data", "/", "BGGZ_Onderhanden_Werk.xlsx"),
col_types = colspecs_bggz_sessies)
# Opschonen -------------------------------------------------------------------------------------------------------
verwijder_null <- function(x) {
if (is.character(x)) {
# Check of er NULL voorkomt in de kolom
hass_null <- FALSE
hass_null <- sum(x == "NULL", na.rm = TRUE) > 0
if(hass_null) {
x <- sub("NULL", "", x)
}
}
return(x)
}
# Nulls vervangen in beide bestanden
bggz_traject <- bggz_traject %>%
mutate_each(funs(verwijder_null))
bggz_sessies <- bggz_sessies %>%
mutate_each(funs(verwijder_null))
# Datums ----------------------------------------------------------------------------------------------------------
# kolommem met datums in trajectenbestand
datums <- c(which(names(bggz_traject) %in% c("laatst_geplande_BGGZ_sessie", "laatst_uitgevoerde_BGGZ_sessie")),
which(grepl("[Dd]atum", names(bggz_traject))))
# datums converteren
bggz_traject[, datums] <- lapply(bggz_traject[, datums], dmy)
# kolommen met datums in sessiebestand
datums <- c(which(grepl("[Dd]atum", names(bggz_sessies))))
# datums converteren
bggz_sessies[, datums] <- lapply(bggz_sessies[, datums], dmy)
View(bggz_traject)
View(bggz_sessies)
trajecten_bggz <- bggz_traject %>%
select(bsn = BurgerServiceNummer, dossierid = Dossierid, bggzid = basisggztrajectid, startdatum = startjaarbggz,
einddatum = einddatumbggz, zvz_initieel = ZorgvraagzwaarteInitieel, zvz_actueel = ZorgvraagzwaarteActueel)
View(trajecten_bggz)
